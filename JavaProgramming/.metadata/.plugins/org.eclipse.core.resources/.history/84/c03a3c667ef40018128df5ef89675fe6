package sec04.exam03_properties;

import java.io.FileReader;
import java.net.URLDecoder;
import java.util.Properties;

public class PropertiesExample {

	public static void main(String[] args) throws Exception {
		/*
		 * Properties는 Hashtable의 하위 클래스이기 때문에 Hashtable의 모든 특징을 그대로 가지고 있다.
		 * 차이점은 Hashtable은 키와 값을 다양한 타입으로 지정이 가능한데 비해 Properties는 키와 값을 String타입으로 제한한 컬렉션이다.
		 * 프로퍼티(~.peroperties)파일을 읽을 때 주로 사용한다.
		 * 프로퍼티 파일은 키와 값이 =기호로 연결되어 있는 텍스트 파일로 ISO 8859-1 문자셋으로 저장된다.
		 * 이 문자셋으로 직접 표현할 수 없는 한글은 유니코드로 변환되어 저장된다.
		 * =>language=\uD55C\uAD6D\uC5B4(한국어)
		 */
		Properties properties = new Properties();

		/*
		 * 프로퍼티 파일은 일반적으로 클래스 파일(~.class)과 함께 저장된다. 클래스 파일을 기준으로 상대 경로를 이용해서
		 * 프로퍼티 파일의 경로를 얻어려면 Class의 getResource()메소드를 이용하면 된다.
		 * getResource()는 주어진 파일의 상대 경로를 URL객체로 리턴하는데, URL의 getPath()는 파일의 절대 경로를 리턴한다.
		 * 다른 패키지에 프로퍼티 파일이 있을 경우에는 경로 구분자로 "/"를 사용한다.
		 */
		String path = PropertiesExample.class.getResource("config/database.properties").getPath();
		path = URLDecoder.decode(path, "utf-8");//경로에 한글이 있을 경우 한글을 복원

		properties.load(new FileReader(path));//프로퍼티 파일을 읽음

		String driver = properties.getProperty("driver");//해당 하는 키의 값을 읽는다.
		String url = properties.getProperty("url");
		String username = properties.getProperty("username");
		String password = properties.getProperty("password");
		//String language = properties.getProperty("language");
		String language = (String) properties.get("language");

		System.out.println("driver: " + driver);
		System.out.println("url: " + url);
		System.out.println("username: " + username);
		System.out.println("password: " + password);
		System.out.println("language: " + language);
	}

}
